package ca.ott.al.starmap.ui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Label;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Set;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import ca.ott.al.starmap.core.UnitOrderExecutor;
import ca.ott.al.starmap.core.map.StarMapObject;
import ca.ott.al.starmap.core.map.StarSystem;
import ca.ott.al.starmap.core.order.Order;
import ca.ott.al.starmap.core.order.OrderQueue;
import ca.ott.al.starmap.core.order.unit.move.AssaultOrder;
import ca.ott.al.starmap.core.order.unit.move.MoveOrder;
import ca.ott.al.starmap.core.order.unit.support.RepairOrder;
import ca.ott.al.starmap.core.unit.MilitaryForce;
import ca.ott.al.starmap.core.unit.StarMapUnit;
import ca.ott.al.starmap.core.unit.Warship;
import ca.ott.al.starmap.ui.dialog.RaiseUnitDialog;

public class UnitOrdersDetailPanel extends JPanel{

    /**
     * Generated by Eclipse
     */
    private static final long serialVersionUID = 1L;
    
    //Panel components
    JPanel planetDetailsPanel;
    @SuppressWarnings("rawtypes")
    JList unitList;
    JPanel unitDetailsPanel;
    @SuppressWarnings("rawtypes")
    JList unitOrdersList;
    JButton cancelUnitOrderButton;
    JPanel unitManagementPanel;
    
    JScrollPane unitListScrollPane;
    JScrollPane unitOrdersListScrollPane;
    
    //Planet details
    JLabel planetNameTitle, planetName;
    JLabel planetLevelTitle, planetLevel;
    JLabel planetFactionTitle, planetFaction;
    JLabel planetResourceTitle, planetResource;
    JLabel planetFortTitle, planetFort;
    JLabel planetDepotTitle, planetDepot;
    JLabel planetTrafficTitle, planetTraffic;
    JLabel planetFactoryTitle, planetFactory;
    
    //Unit details 
    JLabel unitName;
    JLabel unitCO;
    JLabel unitFaction;
    JLabel unitLoyalty;
    JLabel unitAirRating;
    JLabel unitGroundRating;
    JLabel unitExperience;
    JLabel unitSupply;
    JLabel unitFatigue;
    
    //Buttons for managing units
    JButton raiseUnitButton;
    JButton mergeUnitButton;
    JButton disbandUnitButton;
    
    //ISIF attributes
    private StarSystem selectedSystem;
    private StarMapUnit selectedUnit;
    
    //Special reference to Parent Panel so it will adjust the buttons in context-sensitive way
    UnitOrdersPanel parentPanel;
    
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public UnitOrdersDetailPanel(UnitOrdersPanel parentPanel) {
        this.parentPanel = parentPanel;
        
        setLayout(new GridBagLayout());
        
        GridBagConstraints c = new GridBagConstraints();
        //Top level labels
        JLabel title1, title2, title3, title4;
        
        title1 = new JLabel("Planetary Details");
        c.gridy = 0; c.gridx = 0;
        c.gridheight = 1;
        c.gridwidth = 1;
        c.weightx = 100; c.weighty = 50; 
        c.fill = GridBagConstraints.HORIZONTAL;
        add(title1, c);
        
        title2 = new JLabel("Units in System");
        c = new GridBagConstraints();
        c.gridy = 0; c.gridx = 1;
        c.gridheight = 1;
        c.gridwidth = 1;
        c.weightx = 10; c.weighty = 50; 
        c.fill = GridBagConstraints.HORIZONTAL;
        add(title2, c);
        
        title3 = new JLabel("Unit Details");
        c = new GridBagConstraints();
        c.gridy = 0; c.gridx = 2;
        c.gridheight = 1;
        c.gridwidth = 2;
        c.weightx = 100; c.weighty = 50; 
        c.fill = GridBagConstraints.HORIZONTAL;
        add(title3, c);
        
        title4 = new JLabel("Unit Orders");
        c = new GridBagConstraints();
        c.gridy = 0; c.gridx = 4;
        c.gridheight = 1;
        c.gridwidth = 1;
        c.weightx = 10; c.weighty = 50; 
        c.fill = GridBagConstraints.HORIZONTAL;
        add(title4, c);

        JLabel title5 = new JLabel("Unit Management");
        c = new GridBagConstraints();
        c.gridy = 0; c.gridx = 5;
        c.gridheight = 1;
        c.gridwidth = 1;
        c.weightx = 10; c.weighty = 50; 
        c.fill = GridBagConstraints.HORIZONTAL;
        add(title5, c);

        
        //Planet and Unit detail
        planetDetailsPanel = new JPanel();
        createPlanetDetailsPanel();
        c = new GridBagConstraints();
        c.gridy = 1; c.gridx = 0;
        c.gridheight = 8;
        c.gridwidth = 1;
        c.weightx = 10; c.weighty = 800; 
        c.fill = GridBagConstraints.BOTH;
        add(planetDetailsPanel, c);
        //Was BOTH in all four case in this 
        //section with the results that we had.
        
        String [] unitListItems = new String[1];
        unitList = new JList(unitListItems);
        unitList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        unitList.setPrototypeCellValue(new String(
        		"NorthWind Highlanders 1st Kearney Highlanders"));
        unitList.setLayoutOrientation(JList.VERTICAL);
        //"Wolf s Draggons Zeta Battalion Provisional"
        c = new GridBagConstraints();
        c.gridy = 1; c.gridx = 1;
        c.gridheight = 8;
        c.gridwidth = 1;
        c.weightx = 1; c.weighty = 800; 
        c.fill = GridBagConstraints.BOTH;
        unitListScrollPane = new JScrollPane(unitList);
        
        add(unitListScrollPane, c);
        
        unitDetailsPanel = new JPanel();
        createUnitDetailsPanel();
        c = new GridBagConstraints();
        c.gridy = 1; c.gridx = 2;
        c.gridheight = 8;
        c.gridwidth = 2;
        c.weightx = 100; c.weighty = 800; 
        c.fill = GridBagConstraints.BOTH;
        add(unitDetailsPanel, c);
        
        
        String [] unitOrdersListItems = new String[6];
        unitOrdersList = new JList(unitOrdersListItems);
        unitOrdersList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        unitOrdersList.setPrototypeCellValue("Assault planet with long name");
        c = new GridBagConstraints();
        c.gridy = 1; c.gridx = 4;
        c.gridheight = 7;
        c.gridwidth = 1;
        c.weightx = 1; c.weighty = 700; 
        c.fill = GridBagConstraints.BOTH;
        unitOrdersListScrollPane = new JScrollPane(unitOrdersList);
        add(unitOrdersListScrollPane, c);
        
        cancelUnitOrderButton = new JButton("Cancel Order");
        c = new GridBagConstraints();
        c.gridy = 8; c.gridx = 4;
        c.gridheight = 1;
        c.gridwidth = 1;
        c.weightx = 1; c.weighty = 100; 
        c.fill = GridBagConstraints.BOTH;
        add(cancelUnitOrderButton, c);
        
        //Create the unit management panel
        unitManagementPanel = new JPanel();
        createUnitManagementPanel();
        c = new GridBagConstraints();
        c.gridy = 1; c.gridx = 5;
        c.gridheight = 8;
        c.gridwidth = 1;
        c.weightx = 100; c.weighty = 100; 
        c.fill = GridBagConstraints.BOTH;
        add(unitManagementPanel, c);
        
        JPanel emptyPanel = new JPanel();
        c = new GridBagConstraints();
        c.gridy = 1; c.gridx = 6;
        c.gridheight = 8;
        c.gridwidth = 1;
        c.weightx = 10000; c.weighty = 1000; 
        c.fill = GridBagConstraints.BOTH;
        add(emptyPanel, c);
        
        createListSelectionListeners();
        createCancelOrderListener();
        createUnitManagementListeners();
    }


    private void createPlanetDetailsPanel() {
        planetDetailsPanel.setLayout(new GridBagLayout());
        
        //Dimension d = label.getPreferredSize();  
        //label.setPreferredSize(new Dimension(d.width+60,d.height));
        Dimension d;
        
        planetNameTitle = new JLabel("Planet Name: ");
        planetName = new JLabel("No Planet Selected");
        d = planetName.getPreferredSize();
        planetName.setPreferredSize(new Dimension(d.width+60,d.height));
        
        planetLevelTitle = new JLabel("Planet Standing: ");
        planetLevel = new JLabel("Unknown");
        planetFactionTitle = new JLabel("Affiliation: ");
        planetFaction = new JLabel("Unknown");
        planetResourceTitle = new JLabel("Resource Value: ");
        planetResource = new JLabel("Unknown");
        planetFortTitle = new JLabel("Fortifications: ");
        planetFort = new JLabel("Unknown");
        planetDepotTitle = new JLabel("Depot Value: ");
        planetDepot = new JLabel("Unknown");
        planetTrafficTitle = new JLabel("Communications: ");
        planetTraffic = new JLabel("Unknown");
        planetFactoryTitle = new JLabel("Production Lines: ");
        planetFactory = new JLabel("Unknown");
        
        GridBagConstraints c = new GridBagConstraints();
        c.gridheight = 1;
        c.gridwidth = 1;
        c.weightx = 1; c.weighty = 50; 
        c.fill = GridBagConstraints.HORIZONTAL;
        c.anchor = GridBagConstraints.WEST;

        c.gridx = 0; c.gridy = 0; c.weightx = 1; planetDetailsPanel.add(planetNameTitle, c);
        c.gridx = 1; c.gridy = 0; c.weightx = 10; planetDetailsPanel.add(planetName, c);
        c.gridx = 0; c.gridy = 1; c.weightx = 1; planetDetailsPanel.add(planetLevelTitle, c);
        c.gridx = 1; c.gridy = 1; c.weightx = 10; planetDetailsPanel.add(planetLevel, c);
        c.gridx = 0; c.gridy = 2; c.weightx = 1; planetDetailsPanel.add(planetFactionTitle, c);
        c.gridx = 1; c.gridy = 2; c.weightx = 10; planetDetailsPanel.add(planetFaction, c);
        c.gridx = 0; c.gridy = 3; c.weightx = 1; planetDetailsPanel.add(planetResourceTitle, c);
        c.gridx = 1; c.gridy = 3; c.weightx = 10; planetDetailsPanel.add(planetResource, c);
        c.gridx = 0; c.gridy = 4; c.weightx = 1; planetDetailsPanel.add(planetFortTitle, c);
        c.gridx = 1; c.gridy = 4; c.weightx = 10; planetDetailsPanel.add(planetFort, c);
        c.gridx = 0; c.gridy = 5; c.weightx = 1; planetDetailsPanel.add(planetDepotTitle, c);
        c.gridx = 1; c.gridy = 5; c.weightx = 10; planetDetailsPanel.add(planetDepot, c);
        c.gridx = 0; c.gridy = 6; c.weightx = 1; planetDetailsPanel.add(planetTrafficTitle, c);
        c.gridx = 1; c.gridy = 6; c.weightx = 10; planetDetailsPanel.add(planetTraffic, c);
        c.gridx = 0; c.gridy = 7; c.weightx = 1; planetDetailsPanel.add(planetFactoryTitle, c);
        c.gridx = 1; c.gridy = 7; c.weightx = 10; planetDetailsPanel.add(planetFactory, c);
    }

    private void createUnitDetailsPanel(){
        unitDetailsPanel.setLayout(new GridBagLayout());
        
        Dimension d;
        
        JLabel title1 = new JLabel("Unit Name: ");
        unitName = new JLabel("Unknown");
        d = unitName.getPreferredSize();
        unitName.setPreferredSize(new Dimension(d.width + 90, d.height));
        JLabel title2 = new JLabel("Commanding Officer: ");
        unitCO = new JLabel("Unknown");
        unitCO.setPreferredSize(new Dimension(d.width + 50, d.height));
        JLabel title3 = new JLabel("Affiliation: ");
        unitFaction = new JLabel("Unknown");
        unitFaction.setPreferredSize(new Dimension(d.width + 50, d.height));
        JLabel title4 = new JLabel("Loyalty: ");
        unitLoyalty = new JLabel(" ");
        JLabel title5 = new JLabel("Air Rating: ");
        unitAirRating = new JLabel(" ");
        JLabel title6 = new JLabel("Ground Rating: ");
        unitGroundRating = new JLabel(" ");
        JLabel title7 = new JLabel("Experience: ");
        unitExperience = new JLabel(" ");
        JLabel title8 = new JLabel("Supply: ");
        unitSupply = new JLabel(" ");
        JLabel title9 = new JLabel("Fatigue: ");
        unitFatigue = new JLabel(" ");
        
        GridBagConstraints c = new GridBagConstraints();
        c.gridheight = 1;
        c.gridwidth = 1;
        c.weightx = 1; c.weighty = 50; 
        c.fill = GridBagConstraints.HORIZONTAL;
        c.anchor = GridBagConstraints.WEST;

        c.gridx = 0; c.gridy = 0; unitDetailsPanel.add(title1, c);
        c.gridwidth = 1;
        c.gridx = 1; c.gridy = 0; unitDetailsPanel.add(unitName, c);
        c.gridwidth = 1;
        c.gridx = 0; c.gridy = 1; unitDetailsPanel.add(title2, c);
        c.gridwidth = 1;
        c.gridx = 1; c.gridy = 1; unitDetailsPanel.add(unitCO, c);
        c.gridwidth = 1;
        c.gridx = 0; c.gridy = 2; c.weightx = 1; unitDetailsPanel.add(title3, c);
        c.gridx = 1; c.gridy = 2; c.weightx = 1; unitDetailsPanel.add(unitFaction, c);
        c.gridx = 0; c.gridy = 3; c.weightx = 1; unitDetailsPanel.add(title4, c);
        c.gridx = 1; c.gridy = 3; c.weightx = 1; unitDetailsPanel.add(unitLoyalty, c);
        c.gridx = 0; c.gridy = 4; c.weightx = 1; unitDetailsPanel.add(title5, c);
        c.gridx = 1; c.gridy = 4; c.weightx = 1; unitDetailsPanel.add(unitAirRating, c);
        c.gridx = 0; c.gridy = 5; c.weightx = 1; unitDetailsPanel.add(title6, c);
        c.gridx = 1; c.gridy = 5; c.weightx = 1; unitDetailsPanel.add(unitGroundRating, c);
        c.gridx = 0; c.gridy = 6; c.weightx = 1; unitDetailsPanel.add(title7, c);
        c.gridx = 1; c.gridy = 6; c.weightx = 1; unitDetailsPanel.add(unitExperience, c);
        c.gridx = 0; c.gridy = 7; c.weightx = 1; unitDetailsPanel.add(title8, c);
        c.gridx = 1; c.gridy = 7; c.weightx = 1; unitDetailsPanel.add(unitSupply, c);
        c.gridx = 0; c.gridy = 8; c.weightx = 1; unitDetailsPanel.add(title9, c);
        c.gridx = 1; c.gridy = 8; c.weightx = 1; unitDetailsPanel.add(unitFatigue, c);
    }
    
    private void createUnitManagementPanel(){
        unitManagementPanel.setLayout(new GridBagLayout());
        
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0; c.gridy = 0;
        c.gridheight = 1;
        c.gridwidth = 1;
        c.weightx = 1; c.weighty = 5; 
        c.fill = GridBagConstraints.HORIZONTAL;
        c.anchor = GridBagConstraints.WEST;

        raiseUnitButton = new JButton("Raise Unit");
        unitManagementPanel.add(raiseUnitButton, c);
        
        mergeUnitButton = new JButton("Merge Unit");
        c.gridx = 0; c.gridy = 1;
        unitManagementPanel.add(mergeUnitButton, c);
        
        disbandUnitButton = new JButton("Disband Unit");
        c.gridx = 0; c.gridy = 2;
        unitManagementPanel.add(disbandUnitButton, c);
        
        JPanel emptyPanel = new JPanel();
        c.gridx = 0; c.gridy = 3;
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1; c.weighty = 400; 
        unitManagementPanel.add(emptyPanel, c);
        
    }
    
    private void createListSelectionListeners(){
        
        unitList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    Object selection = unitList.getSelectedValue();
                    if(selection != null){
                        selectedUnit = (StarMapUnit) selection;
                        updateUnitDetails();
                    }
                }
            }
        });

        unitOrdersList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                }
            }
        });

    }
    
    private void createCancelOrderListener() {
        cancelUnitOrderButton.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(ActionEvent e) {
                int index = unitOrdersList.getSelectedIndex();
                
                if(index != -1){
                    //selectedUnit.getOrders().getOrdersList().remove(index);
                    //Order order = selectedUnit.getOrders().get(index);
                    Order order = (Order)unitOrdersList.getSelectedValue();
                    if(order != null){
                        OrderQueue queue = selectedUnit.getOrders();
                        //In this case, I let the queue handle special cases on its own
                        queue.remove(order);
                        
                        if(order instanceof RepairOrder){
                            RepairOrder repair = (RepairOrder)order;
                            selectedUnit.getOwner().getReinforcementPool().addAll(repair.getReinforcements());
                        }
                        
                        if(order instanceof MoveOrder ){
                            MoveOrder moveOrder = (MoveOrder)order;
                            selectedUnit.getOwner().getTransportPool().releaseTransportFleet(moveOrder.getFleet());
                        }
                        
                        if(order instanceof AssaultOrder ){
                            AssaultOrder assaultOrder = (AssaultOrder)order;
                            selectedUnit.getOwner().getTransportPool().releaseTransportFleet(assaultOrder.getFleet());
                        }
                    }
                    //Don't forget to update the list displayed to the user
                    updateUnitOrders(selectedUnit);
                    parentPanel.updateOrderButtonsContext(selectedUnit);
                    parentPanel.getStarMpaPanel().repaint();
                }
            }
        });
    }
    
    private void createUnitManagementListeners() {
        raiseUnitButton.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(ActionEvent e) {
                RaiseUnitDialog dialog = new RaiseUnitDialog(parentPanel.getSelectedFaction(), selectedSystem);
                dialog.setVisible(true);
                updateSystemDetails();
            }
        });
        
    }



    protected void updateSystemDetails(){
        if(selectedSystem != null){
            planetName.setText(selectedSystem.getName());
            planetFaction.setText(selectedSystem.getPrimaryPlanet()
                    .getControllingFaction().getFactionName());
            planetLevel.setText(selectedSystem.getPrimaryPlanet().getPlanetLevelString());

            Double resourceValue = selectedSystem.getPrimaryPlanet().getResourceValue();
            planetResource.setText(String.valueOf(resourceValue));

            int fort = selectedSystem.getPrimaryPlanet().getFortificationLevel();
            if(fort > 0){
                planetFort.setText("Level " + fort);
            } else {
                planetFort.setText("None");
            }

            double depot = selectedSystem.getPrimaryPlanet().getResourceDepot();
            if(depot > 0){
                planetDepot.setText(String.valueOf(depot));
            } else {
                planetDepot.setText("None");
            }

            int productionLines = selectedSystem.getPrimaryPlanet().getFactorySize();
            if(productionLines > 0){
                planetFactory.setText(String.valueOf(productionLines));
            } else {
                planetFactory.setText("None");
            }
            
            //TODO JLabel planetTrafficTitle, planetTraffic;

            //Populate the Unit list, it can contain both Military Forces and Warships
            Set<StarMapUnit> fleet = selectedSystem.getUnitsInSystem();
            Set<MilitaryForce> military = selectedSystem.getPrimaryPlanet().getMilitaryForces();
            
//            IconUtility util = IconUtility.getUtilities();
//            ImageIcon readyUnitIcon = util.createImageIcon("../../../../../resources/images/UnitReadyGround.png", 
//                    "Unit ready on planet");
             
            Vector<StarMapUnit> allUnitsVector = new Vector<StarMapUnit>();
//            Vector<JLabel> allUnitsVector = new Vector<JLabel>();
//            
            for(StarMapUnit warshipOrUnit : fleet){
//                JLabel label = new JLabel(warship.getName());
                allUnitsVector.add(warshipOrUnit);
            }
            for(MilitaryForce force : military){
//                JLabel unitLabel = new JLabel(force.getName(), readyUnitIcon, 1);
//                allUnitsVector.add(unitLabel);
               allUnitsVector.add(force);
            }
            
            unitList.setListData(allUnitsVector);

            if(unitList.getModel().getSize()> 0){
                //Next populate the details of the selected unit.
                unitList.setSelectedIndex(0);
                selectedUnit = (StarMapUnit)unitList.getSelectedValue();
                updateUnitDetails();
            }
        }
    }
    
    protected void updateUnitDetails(){
        if(selectedUnit != null && selectedUnit instanceof MilitaryForce){
            MilitaryForce unit = (MilitaryForce)selectedUnit;
            unitName.setText(unit.getName());
            unitCO.setText(unit.getCommandingOfficer());
            unitFaction.setText(unit.getOwner().getFactionName());
            unitLoyalty.setText(unit.getLoyalty().toString());
            unitAirRating.setText(String.valueOf(Math.round(unit.getAirRating())));
            unitGroundRating.setText(String.valueOf(Math.round(unit.getGroundRating())));
            unitExperience.setText(String.valueOf(Math.round(unit.getExperiencePoints())));
            String supplyString = unit.getSupplyRequirement() + "/" 
                    + unit.getSupplyPointsInStock();
            unitSupply.setText(supplyString);
            unitFatigue.setText(String.valueOf(unit.getFatiguePoints()));
            
            //Display any orders the unit may have
            updateUnitOrders(selectedUnit);

            parentPanel.updateOrderButtonsContext(selectedUnit);
        } else if(selectedUnit != null && selectedUnit instanceof Warship){
            Warship warship = (Warship)selectedUnit;
            //TODO implement the Warship thing...
            
            //Display any orders the unit may have
            updateUnitOrders(selectedUnit);
            
            parentPanel.updateOrderButtonsContext(selectedUnit);
        }
    }
    
    protected void updateUnitOrders(UnitOrderExecutor unit){
        Vector<Order> ordersList = new Vector<Order>();
        ordersList.addAll(unit.getOrders().getOrdersList());
        unitOrdersList.setListData(ordersList);
    }
    
    public StarSystem getSelectedSystem() {
        return selectedSystem;
    }

    public void setSelectedSystem(StarSystem selectedSystem) {
        this.selectedSystem = selectedSystem;
        if(selectedSystem != null){
            updateSystemDetails();
        }
    }

    public StarMapUnit getSelectedUnit() {
        return selectedUnit;
    }
    

}
